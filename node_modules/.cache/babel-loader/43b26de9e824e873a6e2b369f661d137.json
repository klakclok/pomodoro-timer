{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\Desktop\\\\pomodoro-timer\\\\src\\\\Timer.js\",\n    _s = $RefreshSig$();\n\nimport { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport PauseButton from './PauseButton';\nimport PlayButton from './PlayButton';\nimport SettingsButton from './SettingsButton';\nimport { useContext, useState, useEffect, useRef } from 'react';\nimport SettingsContext from './SettingsContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst red = '#f54e4e';\nconst green = '#aec8c';\n\nfunction Timer() {\n  _s();\n\n  const settingsInfo = useContext(SettingsContext);\n  const [isPaused, setIsPaused] = useState(false);\n  const [mode, setMode] = useState('work'); // work/break/null\n\n  const [secondsLeft, setSecondsLeft] = useState(0);\n\n  function switchMode() {\n    const nextMode = mode === 'work' ? 'break' : 'work';\n    setMode(nextMode);\n    setSecondsLeft(nextMode === 'work' ? settingsInfo.workMinutes * 60 : settingsInfo.breakMinutes);\n  }\n\n  function initTimer() {\n    secondsLeft(settingsInfo.workMinutes * 60);\n  }\n\n  useEffect(() => {\n    initTimer();\n    setInterval(() => {\n      if (isPaused) {\n        return;\n      }\n\n      if (secondsLeft === 0) {\n        switchMode();\n      }\n    }, 1000);\n  }, [settingsInfo]);\n  const isPausedRef = useRef(isPaused);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(CircularProgressbar, {\n      value: 60,\n      text: `60%`,\n      styles: buildStyles({\n        textColor: '#fff',\n        pathColor: red,\n        tailColor: 'rgba(255,255,255,.2)'\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px'\n      },\n      children: isPaused ? /*#__PURE__*/_jsxDEV(PlayButton, {\n        onClick: () => {\n          setIsPaused(false);\n          isPausedRef.current = false;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 22\n      }, this) : /*#__PURE__*/_jsxDEV(PauseButton, {\n        onClick: () => {\n          setIsPaused(true);\n          isPausedRef.current = true;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 22\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px'\n      },\n      children: /*#__PURE__*/_jsxDEV(SettingsButton, {\n        onClick: () => settingsInfo.setShowSettings(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Timer, \"BiHSuGLYC1lUYjt9HWz3JkWF2oU=\");\n\n_c = Timer;\nexport default Timer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"names":["CircularProgressbar","buildStyles","PauseButton","PlayButton","SettingsButton","useContext","useState","useEffect","useRef","SettingsContext","red","green","Timer","settingsInfo","isPaused","setIsPaused","mode","setMode","secondsLeft","setSecondsLeft","switchMode","nextMode","workMinutes","breakMinutes","initTimer","setInterval","isPausedRef","textColor","pathColor","tailColor","marginTop","current","setShowSettings"],"sources":["C:/Users/PC/Desktop/pomodoro-timer/src/Timer.js"],"sourcesContent":["import { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\r\nimport 'react-circular-progressbar/dist/styles.css';\r\nimport PauseButton from './PauseButton';\r\nimport PlayButton from './PlayButton';\r\nimport SettingsButton from './SettingsButton';\r\nimport { useContext, useState, useEffect, useRef } from 'react';\r\nimport SettingsContext from './SettingsContext';\r\n\r\nconst red = '#f54e4e';\r\nconst green = '#aec8c';\r\nfunction Timer() {\r\n    const settingsInfo = useContext(SettingsContext);\r\n\r\n    const [isPaused, setIsPaused] = useState(false);\r\n    const [mode, setMode] = useState('work'); // work/break/null\r\n    const [secondsLeft, setSecondsLeft] = useState(0);\r\n    function switchMode() {\r\n        const nextMode = mode === 'work' ? 'break' : 'work';\r\n        setMode(nextMode);\r\n        setSecondsLeft(nextMode === 'work' ? settingsInfo.workMinutes * 60 : settingsInfo.breakMinutes)\r\n    }\r\n    function initTimer() {\r\n        secondsLeft(settingsInfo.workMinutes *60);\r\n    }\r\n    useEffect(() => {\r\n        initTimer();\r\n\r\n        setInterval(() => {\r\n            if (isPaused) {\r\n                return;\r\n            } \r\n            if (secondsLeft ===0) {\r\n                switchMode();\r\n            }\r\n        }, 1000)\r\n    }, [settingsInfo]  ); \r\n    const isPausedRef = useRef(isPaused);\r\n    return (\r\n        <div>\r\n            <CircularProgressbar value={60} text={`60%`} styles = {buildStyles({\r\n                textColor:'#fff',\r\n                pathColor:red,\r\n                tailColor:'rgba(255,255,255,.2)'\r\n            }\r\n\r\n            )} />\r\n            <div style={{marginTop:'20px'}}>\r\n                {isPaused\r\n                    ?<PlayButton onClick={() => { setIsPaused(false); isPausedRef.current = false; }} />\r\n                    :<PauseButton onClick={() => { setIsPaused(true); isPausedRef.current = true; }} />}\r\n            </div>\r\n            <div style={{marginTop:'20px'}}>\r\n                <SettingsButton onClick={() => settingsInfo.setShowSettings(true)} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Timer;"],"mappings":";;;AAAA,SAASA,mBAAT,EAA8BC,WAA9B,QAAiD,4BAAjD;AACA,OAAO,4CAAP;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SAASC,UAAT,EAAqBC,QAArB,EAA+BC,SAA/B,EAA0CC,MAA1C,QAAwD,OAAxD;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;AAEA,MAAMC,GAAG,GAAG,SAAZ;AACA,MAAMC,KAAK,GAAG,QAAd;;AACA,SAASC,KAAT,GAAiB;EAAA;;EACb,MAAMC,YAAY,GAAGR,UAAU,CAACI,eAAD,CAA/B;EAEA,MAAM,CAACK,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,KAAD,CAAxC;EACA,MAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,MAAD,CAAhC,CAJa,CAI6B;;EAC1C,MAAM,CAACY,WAAD,EAAcC,cAAd,IAAgCb,QAAQ,CAAC,CAAD,CAA9C;;EACA,SAASc,UAAT,GAAsB;IAClB,MAAMC,QAAQ,GAAGL,IAAI,KAAK,MAAT,GAAkB,OAAlB,GAA4B,MAA7C;IACAC,OAAO,CAACI,QAAD,CAAP;IACAF,cAAc,CAACE,QAAQ,KAAK,MAAb,GAAsBR,YAAY,CAACS,WAAb,GAA2B,EAAjD,GAAsDT,YAAY,CAACU,YAApE,CAAd;EACH;;EACD,SAASC,SAAT,GAAqB;IACjBN,WAAW,CAACL,YAAY,CAACS,WAAb,GAA0B,EAA3B,CAAX;EACH;;EACDf,SAAS,CAAC,MAAM;IACZiB,SAAS;IAETC,WAAW,CAAC,MAAM;MACd,IAAIX,QAAJ,EAAc;QACV;MACH;;MACD,IAAII,WAAW,KAAI,CAAnB,EAAsB;QAClBE,UAAU;MACb;IACJ,CAPU,EAOR,IAPQ,CAAX;EAQH,CAXQ,EAWN,CAACP,YAAD,CAXM,CAAT;EAYA,MAAMa,WAAW,GAAGlB,MAAM,CAACM,QAAD,CAA1B;EACA,oBACI;IAAA,wBACI,QAAC,mBAAD;MAAqB,KAAK,EAAE,EAA5B;MAAgC,IAAI,EAAG,KAAvC;MAA6C,MAAM,EAAIb,WAAW,CAAC;QAC/D0B,SAAS,EAAC,MADqD;QAE/DC,SAAS,EAAClB,GAFqD;QAG/DmB,SAAS,EAAC;MAHqD,CAAD;IAAlE;MAAA;MAAA;MAAA;IAAA,QADJ,eAQI;MAAK,KAAK,EAAE;QAACC,SAAS,EAAC;MAAX,CAAZ;MAAA,UACKhB,QAAQ,gBACJ,QAAC,UAAD;QAAY,OAAO,EAAE,MAAM;UAAEC,WAAW,CAAC,KAAD,CAAX;UAAoBW,WAAW,CAACK,OAAZ,GAAsB,KAAtB;QAA8B;MAA/E;QAAA;QAAA;QAAA;MAAA,QADI,gBAEJ,QAAC,WAAD;QAAa,OAAO,EAAE,MAAM;UAAEhB,WAAW,CAAC,IAAD,CAAX;UAAmBW,WAAW,CAACK,OAAZ,GAAsB,IAAtB;QAA6B;MAA9E;QAAA;QAAA;QAAA;MAAA;IAHT;MAAA;MAAA;MAAA;IAAA,QARJ,eAaI;MAAK,KAAK,EAAE;QAACD,SAAS,EAAC;MAAX,CAAZ;MAAA,uBACI,QAAC,cAAD;QAAgB,OAAO,EAAE,MAAMjB,YAAY,CAACmB,eAAb,CAA6B,IAA7B;MAA/B;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA,QAbJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAmBH;;GA9CQpB,K;;KAAAA,K;AAgDT,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}