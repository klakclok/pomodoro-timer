{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\Desktop\\\\pomodoro-timer\\\\src\\\\Timer.js\",\n    _s = $RefreshSig$();\n\nimport { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport PauseButton from './PauseButton';\nimport PlayButton from './PlayButton';\nimport SettingsButton from './SettingsButton';\nimport { useContext, useState, useEffect, useRef } from 'react';\nimport SettingsContext from './SettingsContext';\nimport { toBePartiallyChecked } from '@testing-library/jest-dom/dist/matchers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst red = '#f54e4e';\nconst green = '#aec8c';\n\nfunction Timer() {\n  _s();\n\n  const settingsInfo = useContext(SettingsContext);\n  const [isPaused, setIsPaused] = useState(false);\n  const [mode, setMode] = useState('work'); // work/break/null\n\n  const [secondsLeft, setSecondsLeft] = useState(0);\n  const secondsLeftRef = useRef(secondsLeft);\n  const isPausedRef = useRef(isPaused);\n  const modeRef = useRef(mode);\n\n  function switchMode() {\n    const nextMode = modeRef.current === 'work' ? 'break' : 'work';\n    const nextSeconds = nextMode === ('work' ? settingsInfo.workMinutes * 60 : settingsInfo.breakMinutes) * 60;\n    setMode(nextMode);\n    modeRef.current = nextMode;\n    setSecondsLeft(nextSeconds);\n    secondsLeftRef.current = nextSeconds;\n  }\n\n  function tick() {\n    secondsLeftRef.current--;\n    setSecondsLeft(secondsLeftRef.current);\n  }\n\n  function initTimer() {\n    secondsLeft(settingsInfo.workMinutes * 60);\n  }\n\n  useEffect(() => {\n    initTimer();\n    const interval = setInterval(() => {\n      if (isPausedRef.current) {\n        return;\n      }\n\n      if (secondsLeftRef.current === 0) {\n        switchMode();\n      }\n\n      tick();\n    }, 1000);\n    return clearInterval(interval);\n  }, [settingsInfo]);\n  const totalSeconds = mode === 'work' ? settingsInfo.workMinutes * 60 : settingsInfo.breakMinutes * 60;\n  const percentage = Math.round(secondsLeft / totalSeconds);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(CircularProgressbar, {\n      value: 60,\n      text: `60%`,\n      styles: buildStyles({\n        textColor: '#fff',\n        pathColor: red,\n        tailColor: 'rgba(255,255,255,.2)'\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px'\n      },\n      children: isPaused ? /*#__PURE__*/_jsxDEV(PlayButton, {\n        onClick: () => {\n          setIsPaused(false);\n          isPausedRef.current = false;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 22\n      }, this) : /*#__PURE__*/_jsxDEV(PauseButton, {\n        onClick: () => {\n          setIsPaused(true);\n          isPausedRef.current = true;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 22\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px'\n      },\n      children: /*#__PURE__*/_jsxDEV(SettingsButton, {\n        onClick: () => settingsInfo.setShowSettings(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Timer, \"MPD/gsXwT458hogI/8/XQ0VeTwc=\");\n\n_c = Timer;\nexport default Timer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"names":["CircularProgressbar","buildStyles","PauseButton","PlayButton","SettingsButton","useContext","useState","useEffect","useRef","SettingsContext","toBePartiallyChecked","red","green","Timer","settingsInfo","isPaused","setIsPaused","mode","setMode","secondsLeft","setSecondsLeft","secondsLeftRef","isPausedRef","modeRef","switchMode","nextMode","current","nextSeconds","workMinutes","breakMinutes","tick","initTimer","interval","setInterval","clearInterval","totalSeconds","percentage","Math","round","textColor","pathColor","tailColor","marginTop","setShowSettings"],"sources":["C:/Users/PC/Desktop/pomodoro-timer/src/Timer.js"],"sourcesContent":["import { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\r\nimport 'react-circular-progressbar/dist/styles.css';\r\nimport PauseButton from './PauseButton';\r\nimport PlayButton from './PlayButton';\r\nimport SettingsButton from './SettingsButton';\r\nimport { useContext, useState, useEffect, useRef } from 'react';\r\nimport SettingsContext from './SettingsContext';\r\nimport { toBePartiallyChecked } from '@testing-library/jest-dom/dist/matchers';\r\n\r\nconst red = '#f54e4e';\r\nconst green = '#aec8c';\r\nfunction Timer() {\r\n    const settingsInfo = useContext(SettingsContext);\r\n\r\n    const [isPaused, setIsPaused] = useState(false);\r\n    const [mode, setMode] = useState('work'); // work/break/null\r\n    const [secondsLeft, setSecondsLeft] = useState(0);\r\n    const secondsLeftRef = useRef(secondsLeft);\r\n    const isPausedRef = useRef(isPaused);\r\n    const modeRef = useRef(mode);\r\n\r\n    function switchMode() {\r\n        const nextMode = modeRef.current === 'work' ? 'break' : 'work';\r\n        const nextSeconds = nextMode === ('work' ? settingsInfo.workMinutes * 60 : settingsInfo.breakMinutes) * 60;\r\n        setMode(nextMode);\r\n        modeRef.current = nextMode;\r\n        setSecondsLeft(nextSeconds);\r\n        secondsLeftRef.current = nextSeconds;\r\n    }\r\n\r\n    function tick() {\r\n        secondsLeftRef.current --;\r\n        setSecondsLeft(secondsLeftRef.current);\r\n    }\r\n    function initTimer() {\r\n        secondsLeft(settingsInfo.workMinutes *60);\r\n    }\r\n    useEffect(() => {\r\n        initTimer();\r\n\r\n        const interval = setInterval(() => {\r\n            if (isPausedRef.current) {\r\n                return;\r\n            } \r\n            if (secondsLeftRef.current ===0) {\r\n                switchMode();\r\n            }\r\n\r\n            tick();\r\n        }, 1000);\r\n\r\n        return clearInterval(interval);\r\n    }, [settingsInfo]  );\r\n\r\n    const totalSeconds = mode === 'work' \r\n    ? settingsInfo.workMinutes * 60 \r\n    :  settingsInfo.breakMinutes * 60; \r\n    const percentage = Math.round(secondsLeft / totalSeconds);\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <CircularProgressbar value={60} text={`60%`} styles = {buildStyles({\r\n                textColor:'#fff',\r\n                pathColor:red,\r\n                tailColor:'rgba(255,255,255,.2)'\r\n            }\r\n\r\n            )} />\r\n            <div style={{marginTop:'20px'}}>\r\n                {isPaused\r\n                    ?<PlayButton onClick={() => { setIsPaused(false); isPausedRef.current = false; }} />\r\n                    :<PauseButton onClick={() => { setIsPaused(true); isPausedRef.current = true; }} />}\r\n            </div>\r\n            <div style={{marginTop:'20px'}}>\r\n                <SettingsButton onClick={() => settingsInfo.setShowSettings(true)} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Timer;"],"mappings":"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"},"metadata":{},"sourceType":"module"}